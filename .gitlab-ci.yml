# GitLab CI help:      <https://docs.gitlab.com/ee/ci/yaml/>
# GitLab environments: <https://docs.gitlab.com/ee/ci/variables/>
#
# IMPORTANT NOTICES:
# 1. You should make an protected tags rules in repository. Rules list:
# - Tag "*"; Allowed to create "No one"
# - Tag "v*.*.*"; Allowed to create "Maintainers"
# 2. You should make "Push Rule" - "Branch name" regex `[a-z0-9\/\-]+`
# 3. You should protect `master` branch - push for "Maintainers" only
image: docker:stable

variables:
  APP_IMAGE: $CI_REGISTRY_IMAGE/app
  REDIS_VERSION: '5.0.5'
  POSTGRES_VERSION: '11.4'
  POSTGRES_DB: forge
  POSTGRES_PASSWORD: forge
  POSTGRES_USER: forge

stages:
  - build
  - install
  - test
  - deploy

.registry-login: &registry_login
  before_script:
    - &script-docker-login docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY > /dev/null

.cache-common:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - vendor/

build app image:
  stage: build
  services:
    - docker:dind
  only:
    - branches
  <<: *registry_login
  script:
    - docker pull "$APP_IMAGE:$CI_COMMIT_REF_SLUG" || docker pull "$APP_IMAGE:master" || true
    - docker build
      --cache-from "$APP_IMAGE:$CI_COMMIT_REF_SLUG"
      --cache-from "$APP_IMAGE:master"
      -f ./docker/app/Dockerfile
      --tag "$APP_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$APP_IMAGE:$CI_COMMIT_REF_SLUG"

build latest app image:
  stage: build
  services:
    - docker:dind
  only:
    - /^v\d+\.\d+\.\d+$/
  except:
    - branches
  <<: *registry_login
  script:
    - docker pull "$APP_IMAGE:latest" || true
    - docker build
      --cache-from "$APP_IMAGE:latest"
      -f ./docker/app/Dockerfile
      --tag "$APP_IMAGE:$CI_COMMIT_REF_SLUG"
      --tag "$APP_IMAGE:latest" .
    - docker push "$APP_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker push "$APP_IMAGE:latest"


install_dependencies:
  stage: install
  image: $APP_IMAGE:$CI_COMMIT_REF_SLUG
  extends: .cache-common
  script:
    - composer install --prefer-dist --ansi

analyse app:
  stage: test
  image: $APP_IMAGE:$CI_COMMIT_REF_SLUG
  extends: .cache-common
  only:
    - branches
    - tags
  variables:
    GIT_STRATEGY: none
  script:
    - cd /app
    - cp -R ${CI_PROJECT_DIR}/vendor/* vendor/
    - composer analyse

app unit testing: &test-with-services
  stage: test
  image: $APP_IMAGE:$CI_COMMIT_REF_SLUG
  extends: .cache-common
  cache:
    policy: pull
  only:
    - branches
    - tags
  services:
    - postgres:$POSTGRES_VERSION
    - redis:$REDIS_VERSION
  variables:
    DB_DATABASE: $POSTGRES_DB
    DB_USERNAME: $POSTGRES_USER
    DB_PASSWORD: $POSTGRES_PASSWORD
    DB_HOST: postgres
    GIT_STRATEGY: none
    APP_CONTAINER_NAME: app
    APP_DEBUG: 'true'
    DB_PORT: 5432
    REDIS_HOST: redis
    REDIS_PORT: 6379
  script:
    - cd /app
    - cp -R ${CI_PROJECT_DIR}/vendor/* vendor/
    - composer phpunit
  # artifacts:
  #   when: on_failure
  #   expire_in: 1 week
  #   paths:
  #     - logs/

test app running:
  image: $APP_IMAGE:$CI_COMMIT_REF_SLUG
  services:
    - postgres:$POSTGRES_VERSION
    - redis:$REDIS_VERSION
  variables:
    DB_DATABASE: $POSTGRES_DB
    DB_USERNAME: $POSTGRES_USER
    DB_PASSWORD: $POSTGRES_PASSWORD
    DB_HOST: postgres
    GIT_STRATEGY: none
    APP_CONTAINER_NAME: app
    APP_DEBUG: 'true'
    STARTUP_DELAY: 10
    DB_PORT: 5432
    STARTUP_WAIT_FOR_SERVICES: 'true'
    REDIS_HOST: redis
    REDIS_PORT: 6379
  script:
    - rr serve -c /app/.rr.yml &
    - apk add --no-cache curl && sleep 10
    - curl -sS --fail "http://localhost/status"
    - curl -sS --fail --insecure -H 'FORCE-HTTPS:true' "https://localhost/status"

deploy to somewhere:
  stage: deploy
  only:
    - /^v\d+\.\d+\.\d+$/
  except:
    - branches
  script:
    - echo "Write your deploy actions here"
